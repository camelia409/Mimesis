
Prompt for Building Mimesis on Replit for Qloo LLM Hackathon

Objective: Develop Mimesis, a web-based cultural style intelligence engine for the Qloo LLM Hackathon, that redefines personal fashion by translating users’ cultural preferences (e.g., music, shows, games, books, Spotify playlists, Pinterest boards) into unique fashion aesthetics, brand suggestions, outfit ideas, and moodboards, without relying on body type, income, or personal data. Integrate Qloo’s Taste AI™ API for privacy-first cultural mapping and Google’s Gemini API for creative, inclusive style generation. Build and deploy on Replit using Python and Flask, delivering a live demo URL, public GitHub repo, and a 3-minute demo video for submission by Aug 1, 2025, 9:15 PM GMT+5:30.

Project Description:

Purpose: Empower users to discover their authentic style through cultural passions (e.g., “Doja Cat, Blade Runner 2049, Death Stranding”) by generating a unique aesthetic name (e.g., “Neo-Noir Luxe”), curated brand suggestions (high-end, indie, thrift), outfit combinations, and moodboard descriptions, fostering inclusivity, affordability, and sustainability.
Cultural Alignment: Leverage Qloo’s Taste AI™ to map cross-domain cultural signals (e.g., music to fashion) and Gemini’s LLM to interpret nuanced inputs and create vivid style narratives, ensuring privacy-first personalization that transcends geographical and socio-economic barriers.
Key Features:
Input: Users provide cultural preferences via text or links (e.g., Spotify playlists).
Processing: Qloo maps preferences to fashion archetypes; Gemini generates aesthetic names, brands, outfits, and moodboards.
Output: JSON-formatted results with brand suggestions (including indie boutiques), outfit ideas, moodboard visuals, and an interactive AI stylist chat.
Inclusivity: Recommendations for all budgets (luxury, indie, thrift, DIY) and identities, avoiding body-based metrics.
Target Audience: Gen Z, fashion enthusiasts, indie brands, e-commerce platforms, social media integrations (e.g., TikTok fashion challenges).
Technical Requirements:

Platform: Replit (Python template) for cloud-based development, team collaboration (up to 4 members), and hosting.
Backend: Flask for a lightweight web app to handle user inputs, API calls, and result rendering.
Frontend: HTML templates with CSS (custom or Tailwind CDN) for a modern, responsive UI, and JavaScript for form validation.
APIs:
Qloo Taste AI™ API: Key CvVdTX4-BEHocC3z1A9VCakIfYFSeSlXtXtY-4SKijo. Query cultural preferences to map to fashion archetypes (e.g., music → fashion).
Google Gemini API: Key AIzaSyA2JL7kXFhurNWZqh__DHRghXFxUiEtW-0. Use Gemini 1.5 Flash to generate aesthetic names, brand lists, outfit descriptions, and moodboard themes in JSON format.
Deployment: Host on Replit for a public demo URL.
Code Hosting: Public GitHub repo with comprehensive documentation.
Submission: Include a 3-minute demo video (YouTube/Vimeo, no copyrighted material) showing the app’s workflow.
Detailed Development Steps:

Initialize Replit Project:
Create a new Python Repl named Mimesis on replit.com.
Set environment variables in Replit’s Secrets panel:
QLOO_API_KEY: CvVdTX4-BEHocC3z1A9VCakIfYFSeSlXtXtY-4SKijo
GEMINI_API_KEY: AIzaSyA2JL7kXFhurNWZqh__DHRghXFxUiEtW-0
Configure .replit to run python main.py and replit.nix to include Python 3.9, Flask, requests, and google-generativeai.
Project Structure:
Create a modular file structure for hackathon submission:
main.py: Flask app with routes for input, API processing, and result display.
requirements.txt: Dependencies (flask==2.3.3, requests==2.31.0, google-generativeai==0.5.4).
templates/index.html: Input form for cultural preferences (text or links).
templates/results.html: Display JSON-formatted style recommendations.
static/css/styles.css: Modern, responsive styling (use Tailwind CDN for polish).
static/js/scripts.js: Client-side validation for inputs.
README.md: Documentation with setup, features, and submission details.
Backend Implementation:
Flask Routes:
GET /: Serve index.html with a form for cultural inputs (e.g., “Doja Cat, Blade Runner 2049”).
POST /recommend: Process form data, query Qloo and Gemini APIs, render results.html.
(Optional) POST /chat: Enable conversational AI stylist (e.g., “What’s a Berlin rave outfit?”).
Qloo API Integration:
Use requests to POST to Qloo’s endpoint (e.g., https://api.qloo.com/v1/recommendations—verify in Qloo docs).
Payload: { "entities": input.split(", "), "domain": "fashion" } (e.g., ["Euphoria", "The Weeknd"]).
Headers: { "Authorization": "Bearer <QLOO_API_KEY>" }.
Extract archetypes from response; handle errors with try-catch.
Gemini API Integration:
Configure google.generativeai with GEMINI_API_KEY.
Use Gemini 1.5 Flash model.
Prompt: Generate a JSON object with:
aesthetic_name: Unique style ID (e.g., “Digital Femme Fatale”).
brands: 3 brands (e.g., Saint Laurent, indie Seoul boutique, thrift shop).
outfit: Detailed outfit (e.g., “mesh crop top, vinyl skirt, neon boots”).
moodboard: Colors/textures/themes (e.g., “neon pink, metallic, dystopian”).
(Optional) chat_response: Answer style-related questions.
Clean response (strip ```json:disable-run
Error Handling:
Catch API failures and return user-friendly messages (e.g., “Unable to fetch recommendations”).
Log errors to console for debugging.
Frontend Implementation:
index.html:
Form with text input for cultural preferences (placeholder: “Doja Cat, Blade Runner 2049, Death Stranding”).
Optional: Input for Spotify/Pinterest URLs (mock parsing for demo).
Submit button with hover effects.
Include <script src="static/js/scripts.js"> for validation.
results.html:
Display user input and JSON recommendations in a formatted <pre> or styled divs.
Include a “Try Another Vibe” link to /.
(Optional) Add a chat input for AI stylist interaction.
styles.css:
Use Tailwind CDN or custom CSS (white background, purple accents, rounded corners).
Ensure mobile-responsive design (max-width: 800px, flexible layouts).
scripts.js:
Validate form input (non-empty, trimmed).
Show alert for invalid inputs.
(Optional) Add loading spinner during API calls.
Deployment on Replit:
Install dependencies: Run pip install -r requirements.txt in Replit’s shell.
Configure Flask to run on host="0.0.0.0", port=8080.
Click “Run” to launch; note the public URL (e.g., https://mimesis.username.repl.co).
Test live URL to ensure accessibility.
Testing:
Test diverse inputs:
“SZA, Red Dead Redemption, mid-century modern art” → Expect “Retro Desert Muse” aesthetic.
“Doja Cat, Blade Runner 2049, Death Stranding” → Expect “Neo-Noir Luxe” vibe.
Verify Qloo maps cultural archetypes and Gemini outputs structured JSON.
Test error cases (e.g., empty input, API failures) and UI rendering.
Documentation:
Write README.md with:
Overview: Mimesis as a privacy-first, inclusive style intelligence engine.
Setup: Replit instructions, API key setup, run command.
Features: Cultural input, Qloo mapping, Gemini outputs, inclusivity focus.
Submission: Demo URL, GitHub repo, video details.
Future enhancements: Moodboard visuals, TikTok integration, AI stylist chat.
Push to a public GitHub repo.
Hackathon Submission:
Demo URL: Replit’s public URL.
Code: Public GitHub repo with all files and README.
Video:
Record a 3-minute demo showing:
User inputs preferences (text or mock playlist URL).
Qloo API maps to fashion archetypes (show response in video).
Gemini generates aesthetic name, brands, outfit, moodboard.
Results displayed in UI, with optional chat interaction.
Upload to YouTube/Vimeo (public, no copyrighted material).
Submit: Via Qloo Hackathon website by Aug 1, 2025, 9:15 PM GMT+5:30, including demo URL, repo link, video link, and project description.
Optimization for Winning:

Qloo API Showcase:
Highlight cross-domain mapping (e.g., music → fashion → indie boutiques).
Emphasize privacy-first design (no PII, only cultural inputs).
Gemini Creativity:
Use structured prompts for consistent JSON output (e.g., { "aesthetic_name": "...", "brands": [...], "outfit": "...", "moodboard": "..." }).
Include global inclusivity (e.g., suggest indie brands from non-Western markets like Nairobi or Seoul).
Inclusivity & Affordability:
Recommend thrift, vintage, and DIY options to align with sustainable, budget-conscious goals.
Avoid body-based metrics, focusing on cultural identity for universal appeal.
Polish:
Use Tailwind CDN for a modern UI (add to index.html).
Add a loading spinner in scripts.js for API calls.
Ensure error messages are clear and styled.
Narrative:
Pitch Mimesis as a “vibe architect” that empowers self-expression for all.
Highlight use cases: Gen Z style apps, indie brand discovery, social media integrations (TikTok, Instagram).
Emphasize societal impact: Cultural connection, sustainable fashion, inclusivity.
Judging Criteria:
Intelligent LLM Use: Gemini’s nuanced interpretation and creative outputs.
Qloo Integration: Robust use of cultural graph for style mapping.
Technical Execution: Clean code, live demo, error handling.
Originality: Novel approach to fashion via cultural taste, bypassing traditional metrics.
Impact: Empowering users, brands, and platforms with inclusive, affordable style.
Additional Features (Optional for Extra Impact):

Moodboard Visuals: Mock image generation with placeholder URLs (e.g., Unsplash API if time permits).
AI Stylist Chat: Add a conversational route for style queries (e.g., “What’s a ‘Neo-Noir Luxe’ outfit for a rave?”).
Social Media Mockup: Simulate TikTok/Instagram brand suggestions with static data.
Playlist Parsing: Mock Spotify/Pinterest input parsing for demo flair (e.g., extract genres from playlist names).
Constraints:

Ensure demo video is <3 minutes (judges won’t watch beyond).
Avoid third-party trademarks or copyrighted material in video/UI.
Verify Qloo’s exact API endpoint and payload in hackathon docs.
Handle Gemini rate limits by caching responses during testing.
Deliverables:

Functional Replit app with live URL.
Public GitHub repo with code and README.
3-minute demo video on YouTube/Vimeo.
Completed submission form on Qloo Hackathon website.